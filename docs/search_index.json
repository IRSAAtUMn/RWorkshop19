[
["index.html", "Introduction to Reproducible Data Science with R Home", " Introduction to Reproducible Data Science with R Institute for Research in Statistics and its Applications at the University of Minnesota Home With the increasing availability of data with broad applications (and the sheer size of some of these data), it is more important than ever to be able to elucidate trends, decisions, and stories from data. Our team will offer a hands-on introduction to data science and statistics using the free and publicly available software R. Assuming no background in software or statistics, we will introduce you to some of the most useful, modern, and popular data analysis techniques. TOPICS COVERED: Features of R and best practices for reproducible data science Constructing visualizations, wrangling data, and producing simple numerical summaries A gentle introduction to statistical modeling The material herein is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["introduction-to-r-and-rstudio.html", " 1 Introduction to R and RStudio 1.1 Getting Started 1.2 R Studio Overview 1.3 R script", " 1 Introduction to R and RStudio Author: Alicia Hofelich Mohr .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } This workshop is motivated by the increasing need for tools that can be used to elucidate trends, decisions, and stories from data. This practice is broadly referred to as “data science”: source: Wickham &amp; Grolemund: R for Data Science This workflow is often iterative and to ensure we can trust the outcomes, the process between input and output should be transparent and repeatable. Workshop Outline &amp; Goals Our goal is to provide a hands on introduction to navigating the data science pipeline with R. You will walk away with a solid foundation upon which you can build for your own research. Day 1: Introduction to R &amp; RStudio Reproducibility and R Markdown Data Visualization Simple Data Wrangling and Summaries Day 2: Linear Regression Logistic Regression 1.1 Getting Started No matter what data you are working with, you need software to explore and construct inferences from these data. In this workshop, we’ll use the R statistical software. Why R? it’s free it’s open source it’s flexible / useful for a wide variety of applications it has a huge online community it can be used to create reproducible documents, apps, books, etc. (In fact, this document was constructed within RStudio.) R and RStudio Before this workshop, you were asked to download/update both R and RStudio. What’s the difference? https://mirror.las.iastate.edu/CRAN/ Actual program (engine) Can create and run scripts directly in R Text editing on a Mac https://www.rstudio.com/products/rstudio/download/ Integrated Development Environment (IDE) for R Text editing for Mac and PC Easy integration with R Markdown, Shiny, git, etc 1.2 R Studio Overview Note that when you first open RStudio, you will only see three windows (because you won’t have any scripts or files open yet). 1.2.1 The R console The R console is where R commands are executed and most output will be displayed. You can type commands directly into the console and run them by pressing “enter”. Using R as a calculator We can use R as a basic calculator. Try typing and running each of the following into the console. 2 + 3 2 * 3 2^3 (2 + 3)^2 2 + 3^2 Assignment We can assign and store R output as objects in R’s environment. This allows us to use or reference the output later. Store the result of 2 + 3^2 as my_result my_result &lt;- 2 + 3^2 Tip: press ‘cmd+enter’ on a Mac and ‘cntl+enter’ on a PC to create the assign arrow Once you create an object, you will see it appear in the “Environment” pane. Check out the result in the console my_result Do something with the results my_result + 5 Update the object my_result &lt;- my_result + 5 my_result Object names can not include spaces or start with numbers! my result &lt;- 2 + 3^2 1result &lt;- 2 + 3^2 Functions R also has built in functions that take in arguements and return an output: function(arguments). Arugments can be objects, numbers, or text. sqrt(9) sqrt(my_result) The sum() function calculates the sum of the listed numbers. Does the order of arguments matter? sum(2, 3) sum(3, 2) What does the rep() function do? Does the order of arguments matter? rep(2, 3) rep(3, 2) Arguments have names rep(x = 3, times = 2) rep(times = 2, x = 3) Is R case sensitive? eg: Can we spell rep() as Rep()? Rep(2, 3) 1.2.2 The Help window How do you know what a function does, what arguments are available, and what they are named? Look in the help window! You can find the help page for a function by typing the function name in the search bar Or by typing “?” followed by the function name in the console ?rep() If you are not sure of what a function would be called or whether it exists, a great option is to Google it. Some helpful sites include: Stack Overflow: http://stackoverflow.com/questions/tagged/r R bloggers: http://www.r-bloggers.com/ Quick-R: http://www.statmethods.net/ 1.2.3 The Package window Functions such as rep() and sum() (along with many others) are built into R’s base. These sets of functions are often referred to as “base R”. However, because R is open source, anyone can contribute extra functions to R (which allow you to do more things) - these extra functions are bundled into “packages” and are typically hosted in the CRAN repository. To install the package from CRAN to your computer, you can click “Install” in the package tab, which opens a pop-up window. Or use install.packages() in the console install.packages(&quot;ggplot2&quot;) You only need to install packages once for each computer/version of R. To access the functions in R, you need to load the packages with the library() command each time start a new R session. library(ggplot2) Note: There are MANY ways to do the same thing in R. For example, cronbach’s alpha (a common measure of internal scale consistency) is not built into base R. psych package: alpha() psy package: cronbach() ltm package: cronbach.alpha() fmsb package: CronbachAlpha() epiDisplay package: alpha() 1.2.4 The Environment window Objects we create in R are stored in the Environment tab. If this gets cluttered and you want to “start fresh”, you can clear the environment: Click on the “broom” icon: Or type into the console: rm(list=ls()) 1.2.5 The History window This window provides a list of all the commands you have entered in the console While this can serve as a nice reminder of what you have done, think about how well you will remember what all this means tomorrow. Or six months from now. For procedures you care about (for example, anything with data), you will want to capture what you do in an R script. 1.3 R script To open a new script, select File –&gt; New File –&gt; R Script R scripts Contain R code for a given analysis/project (just as you would type it in the console) Include comments (R ignores lines starting with #) Can be run line by line (“run”) or all at once (“source”) Need to be written in order (i.e., code to create an object needs to come before code that uses the object) Let’s prep our R script for data exploration. You can use comments to describe what lines of code do, or as breaks to set apart information about the script from the script itself. ###################################### ## Intro to R Workshop ## ## 2019-08-14 ###################################### You can run code from a script in the console by pressing “cmd+enter” (Mac) or “cntl+enter” (PC) # Calculate 3 squared 3^2 1.3.1 Working with data The follow data were used in FiveThirtyEight’s article “Some People Are Too Superstitious To Have A Baby On Friday The 13th”, which analyzes rates of scheduled births on the 13th of the month. This analysis uses the following data: Data Structure Tidy data tables have two key features: Each row represents a single observational unit of the sample. Each column represents a variable, ie. an attribute of the cases. There are no extras in the dataset - no row summaries, column summaries, data entry notes, comments, graphs, etc. All comments about the data collection, variables, etc should be provided in a separate codebook. Question: What are the units of observation in the above data? What are the variables? Importing Data You can read data into R from a file on your computer, a dataset on the internet, or use data that are included in a package in R. Luckily for us, the Friday the 13th data are already stored within R in the fivethirtyeight package. IF AND ONLY IF you did not install the fivethirtyeight package before the workshop, you can do so now by typing the following code in the console: install.packages(&quot;fivethirtyeight&quot;, dependencies = TRUE) You only need to install a package one time for a given computer and version of R. However, each time you want to use functions or data in a package, you will need to load the package into R. Put the following code in your script: library(fivethirtyeight) data(US_births_2000_2014) To learn more about this data, you can access codebook information: ?US_births_2000_2014 Examining data structure in R Before we do any analysis, we have to understand the structure of our data. Try each of the following by typing them into your script and running them: # View the data table in a separate tab View(US_births_2000_2014) # Check out the first rows in the console head(US_births_2000_2014) # Obtain the data dimensions: rows x columns dim(US_births_2000_2014) # Get the variable names names(US_births_2000_2014) # Look at summary information for each variable summary(US_births_2000_2014) Examining specific variables # Access a single variable using &quot;$&quot; US_births_2000_2014$year US_births_2000_2014$month # Determine levels/categories of categorical variables levels(factor(US_births_2000_2014$year)) levels(factor(US_births_2000_2014$day_of_week)) Subsetting datasets We can take subsets of observations in the data that satisfy a criterion defined by a variable in the dataset: # Subset of dates that fell on a Friday fridays &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot;) dim(fridays) summary(fridays) # Subset of dates that were on the 13th of the month thirteens &lt;- subset(US_births_2000_2014, US_births_2000_2014$date_of_month == &quot;13&quot;) dim(thirteens) summary(thirteens) # Subset of dates that were on the 13th AND a Friday fridays13 &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot; &amp; US_births_2000_2014$date_of_month == &quot;13&quot;) dim(fridays13) summary(fridays13) # Subset of dates that were on the 13th OR a Friday fridays_or_13 &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot; | US_births_2000_2014$date_of_month == &quot;13&quot;) dim(fridays_or_13) summary(fridays_or_13) Some useful syntax for subsetting: &lt; (less than), &lt;= (less than or equal to), &gt; (greater than), &gt;= (greater than or equal to), == (equal to) &amp; (and), | (or) Exercises Let’s apply the above tools to the bechdel data in the fivethirtyeight package. This data was used in the fivethirtyeight.com’s article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women” which analyzes movies that do/don’t pass the Bechdel test. A movie passes the test if it meets the following criteria: there are \\(\\ge 2\\) female characters the female characters talk to each other at least 1 time, they talk about something other than a male character Load the data into your environment and examine the codebook information. View the dataset in a separate tab. Check out the first 6 cases of the data. What are the units of observation (rows)? How many rows/columns does this dataset have? What are the names of the variables? Access the variable clean_test alone. What are the levels of this variable? Create a subset of the data that contain only movies that fail the bechdal test. Store this as failures. How many rows does this subset contain? Create a subset of the data that contain movies with a 2013 budget under one million dollars. Store this subset as cheap. How many rows does this subset contain? Solutions: #1. Load the data into your environment and examine the codebook information. library(fivethirtyeight) data(&quot;bechdel&quot;) ?bechdel #2. View the dataset in a separate tab. View(bechdel) #3. Check out the first 6 cases of the data. head(bechdel) #4. What are the units of observation (rows)? # each row = a movie #5. How many rows/columns does this dataset have? dim(bechdel) #6. What are the names of the variables? names(bechdel) #7. Access the variable `clean_test` alone. What are the levels of this variable? bechdel$clean_test levels(factor(bechdel$clean_test)) #8. Create a subset of the data that contain only movies that fail the bechdal test. Store this as `failures`. How many rows does this subset contain? failures &lt;- subset(bechdel, bechdel$binary == &quot;FAIL&quot;) dim(failures) #9. Create a subset of the data that contain movies with a 2013 budget under one million dollars. Store this subset as `cheap`. How many rows does this subset contain? cheap &lt;- subset(bechdel, bechdel$budget_2013 &lt; 1000000) "],
["reproducible-reports-with-rmarkdown.html", " 2 Reproducible Reports with RMarkdown 2.1 Overview of R Markdown 2.2 YAML 2.3 Markdown", " 2 Reproducible Reports with RMarkdown Author: Alicia Hofelich Mohr .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } 2.1 Overview of R Markdown A not-so-great workflow While R scripts contain all the R code you produce in a format that can be easily re-run, they do not include the output or results of your analysis. Comments can be used to describe reactions or intepretations of results, but they are not the best way to present this interpretation in a readable way. Therefore, to use R for data analysis and reporting, you may find yourself engaging in a workflow that involves a lot of copying and pasting (or transcribing) between your R script, console, and a document editor. A better way What if there was a better way to run R code, capture output, and present interpretation together? There is - R Markdown! Reproducible Reports R Markdown is a considered a literate programming tool, which is a form of coding that combines text meant for a human to understand with snippets or sections of code for a computer to execute. R Markdown uses Markdown as its human readable text language. Markdown is a straightforward text-to-HTML tool that can format text for the web. This is interspersed with code chunks R can read and execute. If you are familiar with the text editing language LaTeX, there is a fully LaTeX option for reproducible reports in R using Sweave. In R Studio To open a new R Markdown file, go to File –&gt; New File –&gt; R Markdown If you have not yet installed the rmarkdown package, you may see a window prompting you to install that package and any related dependencies. If you see this, click to install the required packages. Once you have all the packages installed, you will see a pop-up window with various options for the type of R Markdown document and the output. There are many different options for each - in fact, this website was created using R Markdown! For this workshop, we will stick with the default options and click ok. The .Rmd File R will automatically open an R Markdown (.Rmd) file with some example text and code already included. An R Markdown file has the following components - YAML, R-code chunks, and Markdown text. To compile the code and text together, press the “knit” button at the top of the file. This will by default open the HTML report in a new window and save a .html file in the folder with the .rmd file. 2.2 YAML The YAML section contains the front matter of your document - title, authors, date, etc. It also controls the formatting of the report output. For example, you can add a table of contents to your document: Or add options to make the table of contents float as you scroll: There are many other adjustments you can make to the document. The Definitive Guide to R Markdown website is a great place to learn about these options. 2.3 Markdown Markdown is an easy to use text formating language that can be converted to HTML. The markdown portion of the document is where you add in headings, narrative information about the analysis, and any interpretations. Headings Markdown - Try adding levels of headers or a link R chunks - Try creating a new chunk - Hide the code - show the code and hide the output TRY it - small version of what I had? "],
["data-visualization.html", " 3 Data Visualization 3.1 ggplot 3.2 Univariate visualizations 3.3 Visualizing Relationships 3.4 Exercises 3.5 Extra", " 3 Data Visualization Author: Alicia Johnson THIS IS JUST A PLACEHOLDER. WILL UPDATE. The following data set on the 2016 election is stored as a csv file at https://www.macalester.edu/~ajohns24/Data/electionDemographics16.csv: This data set combines the county level election results provided by Tony McGovern (shared on github), county level demographic data from the df_county_demographics data set within the choroplethr R package, and historical information about red/blue/purple states. Let’s take a quick look: # Use read.csv() to import the csv file election &lt;- read.csv(&quot;https://www.macalester.edu/~ajohns24/Data/electionDemographics16.csv&quot;) # Check it out! dim(election) # dimensions head(election, 2) # first 2 rows names(election) # variable names Now that we understand the structure of this data set, we can start to ask some questions: To what degree did Trump support vary from county to county? In what number of counties did Trump win? What’s the relationship between Trump’s 2016 support and Romney’s 2012 support? What’s the relationship between Trump’s support and the “color” of the state in which the county exists? Visualizing the data is the first natural step in answering these questions. Why? Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What statistical tool / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. 3.1 ggplot We’ll construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package: library(ggplot2) The best way to learn about ggplot is to just play around. Don’t worry about memorizing the syntax. Rather, focus on the patterns and potential of their application. There’s a helpful cheat sheet for future reference: GGPLOT CHEAT SHEET 3.2 Univariate visualizations We’ll start with univariate visualizations. Categorical Variables Consider the categorical winrep_2016 variable which indicates whether Trump won the county: levels(factor(election$winrep_2016)) ## [1] &quot;FALSE&quot; &quot;TRUE&quot; A table provides a simple summary of the number of counties that fall into these 2 categories: table(election$winrep_2016) ## ## FALSE TRUE ## 487 2625 A bar chart provides a visualization of this table. Try out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot. # Set up a plotting frame ggplot(election, aes(x = winrep_2016)) # Add a layer with bars ggplot(election, aes(x = winrep_2016)) + geom_bar() In summary: Quantitative Variables The quantitative perrep_2016 variable summarizes Trump’s percent of the vote in each county. Quantitative variables require different summary tools than categorical variables. We’ll explore 2 methods for graphing quantitative variables: histograms &amp; density plots. Histograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Try out the code below. # Set up a plotting frame ggplot(election, aes(x = perrep_2016)) # Add a histogram layer ggplot(election, aes(x = perrep_2016)) + geom_histogram() # Change the border colors ggplot(election, aes(x = perrep_2016)) + geom_histogram(color = &quot;white&quot;) # Change the bin width ggplot(election, aes(x = perrep_2016)) + geom_histogram(color = &quot;white&quot;, binwidth = 0.10) In summary: Density plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range. # Set up the plotting frame ggplot(election, aes(x = perrep_2016)) # Add a density curve ggplot(election, aes(x = perrep_2016)) + geom_density() In summary: 3.3 Visualizing Relationships Consider the data on just 6 of the counties: Before constructing graphics of the relationships among these variables, we need to understand what features these graphics should have. Without peaking at the exercises, challenge yourself to think about how we might graph the relationships among the following sets of variables: perrep_2016 vs perrep_2012 perrep_2016 vs StateColor perrep_2016 vs perrep_2012 and StateColor (in 1 plot) perrep_2016 vs perrep_2012 and median_rent (in 1 plot) Run through the following exercises which introduce different approaches to visualizing relationships. Scatterplots of 2 quantitative variables Each quantitative variable has an axis. Each case is represented by a dot. # Just a graphics frame ggplot(election, aes(y = perrep_2016, x = perrep_2012)) # Add a scatterplot layer ggplot(election, aes(y = perrep_2016, x = perrep_2012)) + geom_point() # Add a scatterplot layer: label by state ggplot(election, aes(y = perrep_2016, x = perrep_2012)) + geom_text(aes(label = abb)) # Another predictor ggplot(election, aes(y = perrep_2016, x = median_rent)) + geom_point() In summary: Side-by-side plots of 1 quantitative variable vs 1 categorical variable # Density plots by group ggplot(election, aes(x = perrep_2016, fill = StateColor)) + geom_density() # To see better: add transparency ggplot(election, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) # Fix the color scale! ggplot(election, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) # To see better: split groups into separate plots ggplot(election, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + facet_wrap( ~ StateColor) + scale_fill_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) # Or use boxplots! ggplot(election, aes(x = StateColor, y = perrep_2016)) + geom_boxplot() In summary: Scatterplots of 1 quantitative variable vs 1 categorical &amp; 1 quantitative variable If median_rent and StateColor both explain some of the variability in perrep_2016, why not include both in our analysis?! Let’s. # Scatterplot: id groups using color ggplot(election, aes(y = perrep_2016, x = median_rent, color = StateColor)) + geom_point(alpha = 0.5) # Fix the color scale! ggplot(election, aes(y = perrep_2016, x = median_rent, color = StateColor)) + geom_point(alpha = 0.5) + scale_color_manual(values = c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) # Scatterplot: split/facet by group ggplot(election, aes(y=perrep_2016, x=median_rent, color=StateColor)) + geom_point(alpha=0.5) + facet_wrap( ~ StateColor) + scale_color_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) In summary: Plots of 3 quantitative variables # Scatterplot: represent third variable using color ggplot(election, aes(y = perrep_2016, x = median_rent, color = perrep_2012)) + geom_point(alpha = 0.5) # Scatterplot: represent third variable using size ggplot(election, aes(y = perrep_2016, x = median_rent, size = perrep_2012)) + geom_point(alpha = 0.5) # Scatterplot: discretize the third variable ggplot(election, aes(y = perrep_2016, x = median_rent, color = cut(perrep_2012,3))) + geom_point(alpha = 0.5) In summary: 3.4 Exercises Recall the US_births_2000_2014 data in the fivethirtyeight package: library(fivethirtyeight) data(&quot;US_births_2000_2014&quot;) In the previous activity, we investigated the basic features of this data set: dim(US_births_2000_2014) ## [1] 5479 6 head(US_births_2000_2014, 2) ## # A tibble: 2 x 6 ## year month date_of_month date day_of_week births ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt; &lt;ord&gt; &lt;int&gt; ## 1 2000 1 1 2000-01-01 Sat 9083 ## 2 2000 1 2 2000-01-02 Sun 8006 names(US_births_2000_2014) ## [1] &quot;year&quot; &quot;month&quot; &quot;date_of_month&quot; &quot;date&quot; ## [5] &quot;day_of_week&quot; &quot;births&quot; levels(factor(US_births_2000_2014$day_of_week)) ## [1] &quot;Sun&quot; &quot;Mon&quot; &quot;Tues&quot; &quot;Wed&quot; &quot;Thurs&quot; &quot;Fri&quot; &quot;Sat&quot; Let’s graphically explore these variables and the relationships among them! Solutions are below. NOTE: This set of exercises is inspired by the work of Randy Pruim for the MAA statPREP program. First, let’s focus on 2014: only_2014 &lt;- subset(US_births_2000_2014, year == 2014) Construct a univariate visualization of births. Describe the variability in births from day to day in 2014. The time of year might explain some of this variability. Construct a plot that illustrates the relationship between births and date in 2014. NOTE: Make sure that births, our variable of interest, is on the y-axis and treat date as quantitative. One goofy thing that stands out are the 2-3 distinct groups of points. Add a layer to this plot that explains the distinction between these groups. There are some exceptions to the rule in exercise 3, ie. some cases that should belong to group 1 but behave like the cases in group 2. Explain why these cases are exceptions - what explains the anomalies / why these are special cases? Next, consider all births from 2000-2014. Construct 1 graphic that illustrates births trends across all of these years. Finally, consider only those births that occur on Fridays: only_fri &lt;- subset(US_births_2000_2014, day_of_week==&quot;Fri&quot;) Define a new variable fri13 that indicates whether the case falls on a Friday in the 13th date of the month: only_fri$fri13 &lt;- (only_fri$date_of_month == 13) Construct and comment on a plot of that illustrates the distribution of births among Fridays that fall on &amp; off the 13th. Do you see any evidence of superstition? SOLUTIONS: # 1 only_2014 &lt;- subset(US_births_2000_2014, year == 2014) ggplot(only_2014, aes(x = births)) + geom_histogram(color = &quot;white&quot;) ggplot(only_2014, aes(x = births)) + geom_density() #2 ggplot(only_2014, aes(y = births, x = date)) + geom_point() #3 ggplot(only_2014, aes(y = births, x = date, color = day_of_week)) + geom_point() ggplot(only_2014, aes(y = births, x = date)) + geom_text(aes(label = day_of_week)) #4 #HOLIDAYS! For example, Thanksgiving is a Thursday in late November #5 ggplot(US_births_2000_2014, aes(y = births, x = date, color = day_of_week)) + geom_point() #6 only_fri &lt;- subset(US_births_2000_2014, day_of_week==&quot;Fri&quot;) only_fri$fri13 &lt;- (only_fri$date_of_month == 13) ggplot(only_fri, aes(x = births, fill = fri13)) + geom_density(alpha = 0.5) ggplot(only_fri, aes(y = births, x = fri13)) + geom_boxplot() 3.5 Extra We’ve covered some basic graphics. However, different types of relationships require different visualization strategies. For example, there’s a geographical component to the election data. If you have time, try to construct some maps of the election related variables. To this end, you’ll need to install the choroplethr and choroplethrMaps packages: install.packages(&quot;choroplethr&quot;, dependencies = TRUE) install.packages(&quot;choroplethrMaps&quot;, dependencies = TRUE) library(choroplethr) library(choroplethrMaps) # Make a map of Trump support election$value &lt;- election$perrep_2016 county_choropleth(election) # A map of Trump wins election$value &lt;- election$winrep_2016 county_choropleth(election) # Try another variable of interest to you!! "],
["data-wrangling-simple-summaries.html", " 4 Data Wrangling &amp; Simple Summaries", " 4 Data Wrangling &amp; Simple Summaries "]
]
