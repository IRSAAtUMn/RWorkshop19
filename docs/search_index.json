[
["index.html", "Introduction to Reproducible Data Science with R Home", " Introduction to Reproducible Data Science with R Institute for Research in Statistics and its Applications at the University of Minnesota Home With the increasing availability of data with broad applications (and the sheer size of some of these data), it is more important than ever to be able to elucidate trends, decisions, and stories from data. Our team will offer a hands-on introduction to data science and statistics using the free and publicly available software R. Assuming no background in software or statistics, we will introduce you to some of the most useful, modern, and popular data analysis techniques. TOPICS COVERED: Features of R and best practices for reproducible data science Constructing visualizations, wrangling data, and producing simple numerical summaries A gentle introduction to statistical modeling The material herein is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["introduction-to-r-and-rstudio.html", " 1 Introduction to R and RStudio 1.1 Getting Started 1.2 R Studio Overview 1.3 R script", " 1 Introduction to R and RStudio Author: Alicia Hofelich Mohr .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } This workshop is motivated by the increasing need for tools that can be used to elucidate trends, decisions, and stories from data. This practice is broadly referred to as “data science”: source: Wickham &amp; Grolemund: R for Data Science This workflow is often iterative and to ensure we can trust the outcomes, the process between input and output should be transparent and repeatable. Workshop Outline &amp; Goals Our goal is to provide a hands on introduction to navigating the data science pipeline with R. You will walk away with a solid foundation upon which you can build for your own research. Day 1: Introduction to R &amp; RStudio Reproducibility and R Markdown Data Visualization Simple Data Wrangling and Summaries Day 2: Linear Regression Logistic Regression 1.1 Getting Started No matter what data you are working with, you need software to explore and construct inferences from these data. In this workshop, we’ll use the R statistical software. Why R? it’s free it’s open source it’s flexible / useful for a wide variety of applications it has a huge online community it can be used to create reproducible documents, apps, books, etc. (In fact, this document was constructed within RStudio.) R and RStudio Before this workshop, you were asked to download/update both R and RStudio. What’s the difference? https://mirror.las.iastate.edu/CRAN/ Actual program (engine) Can create and run scripts directly in R Text editing on a Mac https://www.rstudio.com/products/rstudio/download/ Integrated Development Environment (IDE) for R Text editing for Mac and PC Easy integration with R Markdown, Shiny, git, etc 1.2 R Studio Overview Note that when you first open RStudio, you will only see three windows (because you won’t have any scripts or files open yet). 1.2.1 The R console The R console is where R commands are executed and most output will be displayed. You can type commands directly into the console and run them by pressing “enter”. Using R as a calculator We can use R as a basic calculator. Try typing and running each of the following into the console. 2 + 3 2 * 3 2^3 (2 + 3)^2 2 + 3^2 Assignment We can assign and store R output as objects in R’s environment. This allows us to use or reference the output later. Store the result of 2 + 3^2 as my_result my_result &lt;- 2 + 3^2 Tip: press ‘cmd+enter’ on a Mac and ‘cntl+enter’ to create the assign arrow Once you create an object, you will see it appear in the “Environment” pane. Check out the result in the console my_result Do something with the results my_result + 5 Update the object my_result &lt;- my_result + 5 my_result Object names can not include spaces or start with numbers! my result &lt;- 2 + 3^2 1result &lt;- 2 + 3^2 Functions R also has built in functions that take in arguements and return an output: function(arguments). Arugments can be objects, numbers, or text. sqrt(9) sqrt(my_result) The sum() function calculates the sum of the listed numbers. Does the order of arguments matter? sum(2, 3) sum(3, 2) What does the rep() function do? Does the order of arguments matter? rep(2, 3) rep(3, 2) Arguments have names rep(x = 3, times = 2) rep(times = 2, x = 3) Is R case sensitive? eg: Can we spell rep() as Rep()? Rep(2, 3) 1.2.2 The Help window How do you know what a function does, what arguments are available, and what they are named? Look in the help window! You can find the help page for a function by typing the function name in the search bar Or by typing “?” followed by the function name in the console ?rep() If you are not sure of what a function would be called or whether it exists, a great option is to Google it. Some helpful sites include: Stack Overflow: http://stackoverflow.com/questions/tagged/r R bloggers: http://www.r-bloggers.com/ Quick-R: http://www.statmethods.net/ 1.2.3 The Package window Functions such as rep() and sum() (along with many others) are built into R’s base. These sets of functions are often referred to as “base R”. However, because R is open source, anyone can contribute extra functions to R (which allow you to do more things) - these extra functions are bundled into “packages” and are typically hosted in the CRAN repository. To install the package from CRAN to your computer, you can click “Install” in the package tab, which opens a pop-up window. Or use install.packages() in the console install.packages(&quot;ggplot2&quot;) You only need to install packages once for each computer/version of R. To access the functions in R, you need to load the packages with the library() command each time start a new R session. library(ggplot2) Note: There are MANY ways to do the same thing in R. For example, cronbach’s alpha (a common measure of internal scale consistency) is not built into base R. psych package: alpha() psy package: cronbach() ltm package: cronbach.alpha() fmsb package: CronbachAlpha() epiDisplay package: alpha() 1.2.4 The Environment window Objects we create in R are stored in the Environment tab. If this gets cluttered and you want to “start fresh”, you can clear the environment: Click on the “broom” icon: Or type into the console: rm(list=ls()) 1.2.5 The History window This window provides a list of all the commands you have entered in the console While this can serve as a nice reminder of what you have done, think about how well you will remember what all this means tomorrow. Or six months from now. For procedures you care about (for example, anything with data), you will want to capture what you do in an R script. 1.3 R script To open a new script, select File –&gt; New File –&gt; R Script R scripts Contain R code for a given analysis/project (just as you would type it in the console) Include comments (R ignores lines starting with #) Can be run line by line (“run”) or all at once (“source”) Need to be written in order (i.e., code to create an object needs to come before code that uses the object) Let’s prep our R script for data exploration. You can use comments to describe what lines of code do, or as breaks to set apart information about the script from the script itself. ###################################### ## Intro to R Workshop ## ## 2019-08-14 ###################################### You can run code from a script in the console by pressing “cmd+enter” (Mac) or “cntl+enter” (PC) # Calculate 3 squared 3^2 1.3.1 Working with data The follow data were used in FiveThirtyEight’s article “Some People Are Too Superstitious To Have A Baby On Friday The 13th”, which analyzes rates of scheduled births on the 13th of the month. This analysis uses the following data: Data Structure Tidy data tables have two key features: Each row represents a single observational unit of the sample. Each column represents a variable, ie. an attribute of the cases. There are no extras in the dataset - no row summaries, column summaries, data entry notes, comments, graphs, etc. All comments about the data collection, variables, etc should be provided in a separate codebook. Question: What are the units of observation in the above data? What are the variables? Importing Data You can read data into R from a file on your computer, a dataset on the internet, or use data that are included in a package in R. Luckily for us, the Friday the 13th data are already stored within R in the fivethirtyeight package. IF AND ONLY IF you did not install the fivethirtyeight package before the workshop, you can do so now by typing the following code in the console: install.packages(&quot;fivethirtyeight&quot;, dependencies = TRUE) You only need to install a package one time for a given computer and version of R. However, each time you want to use functions or data in a package, you will need to load the package into R. Put the following code in your script: library(fivethirtyeight) data(US_births_2000_2014) To learn more about this data, you can access codebook information: ?US_births_2000_2014 Examining data structure in R Before we do any analysis, we have to understand the structure of our data. Try each of the following by typing them into your script and running them: # View the data table in a separate tab View(US_births_2000_2014) # Check out the first rows in the console head(US_births_2000_2014) # Obtain the data dimensions: rows x columns dim(US_births_2000_2014) # Get the variable names names(US_births_2000_2014) # Look at summary information for each variable summary(US_births_2000_2014) Examining specific variables # Access a single variable using &quot;$&quot; US_births_2000_2014$year US_births_2000_2014$month # Determine levels/categories of categorical variables levels(factor(US_births_2000_2014$year)) levels(factor(US_births_2000_2014$day_of_week)) Subsetting datasets We can take subsets of observations in the data that satisfy a criterion defined by a variable in the dataset: # Subset of dates that fell on a Friday fridays &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot;) dim(fridays) summary(fridays) # Subset of dates that were on the 13th of the month thirteens &lt;- subset(US_births_2000_2014, US_births_2000_2014$date_of_month == &quot;13&quot;) dim(thirteens) summary(thirteens) # Subset of dates that were on the 13th AND a Friday fridays13 &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot; &amp; US_births_2000_2014$date_of_month == &quot;13&quot;) dim(fridays13) summary(fridays13) # Subset of dates that were on the 13th OR a Friday fridays_or_13 &lt;- subset(US_births_2000_2014, US_births_2000_2014$day_of_week == &quot;Fri&quot; | US_births_2000_2014$date_of_month == &quot;13&quot;) dim(fridays_or_13) summary(fridays_or_13) Some useful syntax for subsetting: &lt; (less than), &lt;= (less than or equal to), &gt; (greater than), &gt;= (greater than or equal to), == (equal to) &amp; (and), | (or) Exercises Let’s apply the above tools to the bechdel data in the fivethirtyeight package. This data was used in the fivethirtyeight.com’s article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women” which analyzes movies that do/don’t pass the Bechdel test. A movie passes the test if it meets the following criteria: there are \\(\\ge 2\\) female characters the female characters talk to each other at least 1 time, they talk about something other than a male character Load the data into your environment and examine the codebook information. View the dataset in a separate tab. Check out the first 6 cases of the data. What are the units of observation (rows)? How many rows/columns does this dataset have? What are the names of the variables? Access the variable clean_test alone. What are the levels of this variable? Create a subset of the data that contain only movies that fail the bechdal test. Store this as failures. How many rows does this subset contain? Create a subset of the data that contain movies with a 2013 budget under one million dollars. Store this subset as cheap. How many rows does this subset contain? Solutions: #1. Load the data into your environment and examine the codebook information. library(fivethirtyeight) data(&quot;bechdel&quot;) ?bechdel #2. View the dataset in a separate tab. View(bechdel) #3. Check out the first 6 cases of the data. head(bechdel) #4. What are the units of observation (rows)? # each row = a movie #5. How many rows/columns does this dataset have? dim(bechdel) #6. What are the names of the variables? names(bechdel) #7. Access the variable `clean_test` alone. What are the levels of this variable? bechdel$clean_test levels(factor(bechdel$clean_test)) #8. Create a subset of the data that contain only movies that fail the bechdal test. Store this as `failures`. How many rows does this subset contain? failures &lt;- subset(bechdel, bechdel$binary == &quot;FAIL&quot;) dim(failures) #9. Create a subset of the data that contain movies with a 2013 budget under one million dollars. Store this subset as `cheap`. How many rows does this subset contain? cheap &lt;- subset(bechdel, bechdel$budget_2013 &lt; 1000000) "],
["reproducible-reports-with-rmarkdown.html", " 2 Reproducible Reports with RMarkdown", " 2 Reproducible Reports with RMarkdown Author: Alicia Hofelich Mohr .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } "]
]
